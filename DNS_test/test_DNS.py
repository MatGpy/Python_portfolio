import unittest
import DNStestFunctions

class test_DNS(unittest.TestCase):
    def test_checkDNSresponse_website1_8844(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "A"), {'104.20.71.117', '104.20.72.117'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "AAAA"), {'2606:4700:10::6814:4875', '2606:4700:10::6814:4775'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "MX"), {"b'poczta.x-kom.pl.' 15", "b'xkom-pl0c.mail.protection.outlook.com.' 10", "b'fmmail.x-kom.pl.' 20"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "CNAME"), {"b'x-kom.pl.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "NS"), {"b'micah.ns.cloudflare.com.'", "b'tori.ns.cloudflare.com.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "SOA"), {"b'x-kom.pl.' b'micah.ns.cloudflare.com.' b'dns.cloudflare.com.' 2340029621 10000 2400 604800 1800"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "CAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "104.20.71.117", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "104.20.72.117", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "x-kom.pl", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8...4", "x-kom.pl", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkDNSresponse_website2_8844(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "A"), {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "AAAA"), {'2001:4998:24:120d::1:0', '2001:4998:124:1507::f000', '2001:4998:44:3507::8000', '2001:4998:44:3507::8001', '2001:4998:24:120d::1:1', '2001:4998:124:1507::f001'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "MX"), {"b'mta5.am0.yahoodns.net.' 1", "b'mta7.am0.yahoodns.net.' 1", "b'mta6.am0.yahoodns.net.' 1"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "CNAME"), {"b'yahoo.com.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "NS"), {"b'ns1.yahoo.com.'", "b'ns3.yahoo.com.'", "b'ns4.yahoo.com.'", "b'ns5.yahoo.com.'", "b'ns2.yahoo.com.'",})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "SOA"), {"b'yahoo.com.' b'ns1.yahoo.com.' b'hostmaster.yahoo-inc.com.' 2024050102 3600 300 1814400 600"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "CAA"), {"b'yahoo.com.' b'\\x00\\x05issueglobalsign.com'", "b'yahoo.com.' b'\\x00\\x05issuedigicert.com'", "b'yahoo.com.' b'\\x00\\x05iodefmailto:security@yahooinc.com'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "98.137.11.164", "PTR"), "media-router-fp73.prod.media.vip.gq1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "74.6.231.20", "PTR"), "media-router-fp73.prod.media.vip.ne1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "74.6.231.21", "PTR"), "media-router-fp74.prod.media.vip.ne1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "74.6.143.25", "PTR"), "media-router-fp73.prod.media.vip.bf1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "74.6.143.26", "PTR"), "media-router-fp74.prod.media.vip.bf1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "98.137.11.163", "PTR"), "media-router-fp74.prod.media.vip.gq1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "yahoo.com", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8...4", "yahoo.com", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkDNSresponse_website3_8844(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "A"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "AAAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "MX"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "CNAME"), {"b'pl.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "NS"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "SOA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "CAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "104.20", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8...4", "www.ibetthiswebsitedoesntexist.pl", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkDNSresponse_website4_8844(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "A"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "AAAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "MX"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "CNAME"), {"b'.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "NS"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "SOA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "CAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("8.8.4.4", " ", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("8...4", " ", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkForMultipleRequests_website1_8844(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", "A", {'104.20.71.117', '104.20.72.117'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", "AAAA", {'2606:4700:10::6814:4875', '2606:4700:10::6814:4775'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", "MX", {"b'poczta.x-kom.pl.' 15", "b'xkom-pl0c.mail.protection.outlook.com.' 10", "b'fmmail.x-kom.pl.' 20"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", "CNAME", {"b'x-kom.pl.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", "NS", {"b'micah.ns.cloudflare.com.'", "b'tori.ns.cloudflare.com.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", "SOA", {"b'x-kom.pl.' b'micah.ns.cloudflare.com.' b'dns.cloudflare.com.' 2340029621 10000 2400 604800 1800"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", "CAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "104.20.71.117", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "104.20.72.117", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "x-kom.pl", ".", {'104.20.71.117', '104.20.72.117'}, 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8...4", "x-kom.pl", "A", {'104.20.71.117', '104.20.72.117'}, 100), 0)
    def test_checkForMultipleRequests_website2_8844(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", "A", {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", "AAAA", {'2001:4998:24:120d::1:0', '2001:4998:124:1507::f000', '2001:4998:44:3507::8000', '2001:4998:44:3507::8001', '2001:4998:24:120d::1:1', '2001:4998:124:1507::f001'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", "MX", {"b'mta5.am0.yahoodns.net.' 1", "b'mta7.am0.yahoodns.net.' 1", "b'mta6.am0.yahoodns.net.' 1"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", "CNAME", {"b'yahoo.com.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", "NS", {"b'ns1.yahoo.com.'", "b'ns3.yahoo.com.'", "b'ns4.yahoo.com.'", "b'ns5.yahoo.com.'", "b'ns2.yahoo.com.'",}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", "SOA", {"b'yahoo.com.' b'ns1.yahoo.com.' b'hostmaster.yahoo-inc.com.' 2024050102 3600 300 1814400 600"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", "CAA", {"b'yahoo.com.' b'\\x00\\x05issueglobalsign.com'", "b'yahoo.com.' b'\\x00\\x05issuedigicert.com'", "b'yahoo.com.' b'\\x00\\x05iodefmailto:security@yahooinc.com'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "98.137.11.164", "PTR", "media-router-fp73.prod.media.vip.gq1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "74.6.231.20", "PTR", "media-router-fp73.prod.media.vip.ne1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "74.6.231.21", "PTR", "media-router-fp74.prod.media.vip.ne1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "74.6.143.25", "PTR", "media-router-fp73.prod.media.vip.bf1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "74.6.143.26", "PTR", "media-router-fp74.prod.media.vip.bf1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "98.137.11.163", "PTR", "media-router-fp74.prod.media.vip.gq1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "yahoo.com", ".", {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'}, 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8...4", "yahoo.com", "A", {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'}, 100), 0)
    def test_checkForMultipleRequests_website3_8844(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "A", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "AAAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "MX", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "CNAME", {"b'pl.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "NS", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "SOA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", "CAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "104.20", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", "www.ibetthiswebsitedoesntexist.pl", ".", set(), 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8...4", "www.ibetthiswebsitedoesntexist.pl", "A", set(), 100), 0)
    def test_checkForMultipleRequests_website4_8844(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "A", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "AAAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "MX", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "CNAME", {"b'.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "NS", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "SOA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "CAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8.8.4.4", " ", ".", set(), 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("8...4", " ", "A", set(), 100), 0)
    def test_checkDNSresponse_website1_4444(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "A"), {'104.20.71.117', '104.20.72.117'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "AAAA"), {'2606:4700:10::6814:4875', '2606:4700:10::6814:4775'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "MX"), {"b'poczta.x-kom.pl.' 15", "b'xkom-pl0c.mail.protection.outlook.com.' 10", "b'fmmail.x-kom.pl.' 20"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "CNAME"), {"b'x-kom.pl.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "NS"), {"b'micah.ns.cloudflare.com.'", "b'tori.ns.cloudflare.com.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "SOA"), {"b'x-kom.pl.' b'micah.ns.cloudflare.com.' b'dns.cloudflare.com.' 2340029621 10000 2400 604800 1800"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "CAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "104.20.71.117", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "104.20.72.117", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "x-kom.pl", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4...4", "x-kom.pl", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkDNSresponse_website2_4444(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "A"), {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "AAAA"), {'2001:4998:24:120d::1:0', '2001:4998:124:1507::f000', '2001:4998:44:3507::8000', '2001:4998:44:3507::8001', '2001:4998:24:120d::1:1', '2001:4998:124:1507::f001'})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "MX"), {"b'mta5.am0.yahoodns.net.' 1", "b'mta7.am0.yahoodns.net.' 1", "b'mta6.am0.yahoodns.net.' 1"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "CNAME"), {"b'yahoo.com.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "NS"), {"b'ns1.yahoo.com.'", "b'ns3.yahoo.com.'", "b'ns4.yahoo.com.'", "b'ns5.yahoo.com.'", "b'ns2.yahoo.com.'",})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "SOA"), {"b'yahoo.com.' b'ns1.yahoo.com.' b'hostmaster.yahoo-inc.com.' 2024050102 3600 300 1814400 600"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "CAA"), {"b'yahoo.com.' b'\\x00\\x05issueglobalsign.com'", "b'yahoo.com.' b'\\x00\\x05issuedigicert.com'", "b'yahoo.com.' b'\\x00\\x05iodefmailto:security@yahooinc.com'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "98.137.11.164", "PTR"), "media-router-fp73.prod.media.vip.gq1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "74.6.231.20", "PTR"), "media-router-fp73.prod.media.vip.ne1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "74.6.231.21", "PTR"), "media-router-fp74.prod.media.vip.ne1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "74.6.143.25", "PTR"), "media-router-fp73.prod.media.vip.bf1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "74.6.143.26", "PTR"), "media-router-fp74.prod.media.vip.bf1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "98.137.11.163", "PTR"), "media-router-fp74.prod.media.vip.gq1.yahoo.com")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "yahoo.com", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4...4", "yahoo.com", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkDNSresponse_website3_4444(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "A"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "AAAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "MX"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "CNAME"), {"b'pl.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "NS"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "SOA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "CAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "104.20", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4...4", "www.ibetthiswebsitedoesntexist.pl", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkDNSresponse_website4_4444(self):
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "A"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "AAAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "MX"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "CNAME"), {"b'.'"})
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "NS"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "SOA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "CAA"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "PTR"), set())
        self.assertEqual(DNStestFunctions.checkDNSresponse("4.4.4.4", " ", "."), "Error: provided DNS record type is incorrect, missing, or doesn't exist.")
        self.assertEqual(DNStestFunctions.checkDNSresponse("4...4", " ", "A"), "Error: provided DNS address is incorrect or missing.")
    def test_checkForMultipleRequests_website1_4444(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", "A", {'104.20.71.117', '104.20.72.117'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", "AAAA", {'2606:4700:10::6814:4875', '2606:4700:10::6814:4775'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", "MX", {"b'poczta.x-kom.pl.' 15", "b'xkom-pl0c.mail.protection.outlook.com.' 10", "b'fmmail.x-kom.pl.' 20"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", "CNAME", {"b'x-kom.pl.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", "NS", {"b'micah.ns.cloudflare.com.'", "b'tori.ns.cloudflare.com.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", "SOA", {"b'x-kom.pl.' b'micah.ns.cloudflare.com.' b'dns.cloudflare.com.' 2340029621 10000 2400 604800 1800"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", "CAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "104.20.71.117", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "104.20.72.117", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "x-kom.pl", ".", {'104.20.71.117', '104.20.72.117'}, 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4...4", "x-kom.pl", "A", {'104.20.71.117', '104.20.72.117'}, 100), 0)
    def test_checkForMultipleRequests_website2_4444(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", "A", {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", "AAAA", {'2001:4998:24:120d::1:0', '2001:4998:124:1507::f000', '2001:4998:44:3507::8000', '2001:4998:44:3507::8001', '2001:4998:24:120d::1:1', '2001:4998:124:1507::f001'}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", "MX", {"b'mta5.am0.yahoodns.net.' 1", "b'mta7.am0.yahoodns.net.' 1", "b'mta6.am0.yahoodns.net.' 1"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", "CNAME", {"b'yahoo.com.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", "NS", {"b'ns1.yahoo.com.'", "b'ns3.yahoo.com.'", "b'ns4.yahoo.com.'", "b'ns5.yahoo.com.'", "b'ns2.yahoo.com.'",}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", "SOA", {"b'yahoo.com.' b'ns1.yahoo.com.' b'hostmaster.yahoo-inc.com.' 2024050102 3600 300 1814400 600"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", "CAA", {"b'yahoo.com.' b'\\x00\\x05issueglobalsign.com'", "b'yahoo.com.' b'\\x00\\x05issuedigicert.com'", "b'yahoo.com.' b'\\x00\\x05iodefmailto:security@yahooinc.com'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "98.137.11.164", "PTR", "media-router-fp73.prod.media.vip.gq1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "74.6.231.20", "PTR", "media-router-fp73.prod.media.vip.ne1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "74.6.231.21", "PTR", "media-router-fp74.prod.media.vip.ne1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "74.6.143.25", "PTR", "media-router-fp73.prod.media.vip.bf1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "74.6.143.26", "PTR", "media-router-fp74.prod.media.vip.bf1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "98.137.11.163", "PTR", "media-router-fp74.prod.media.vip.gq1.yahoo.com", 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "yahoo.com", ".", {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'}, 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4...4", "yahoo.com", "A", {'98.137.11.164', '74.6.231.20','74.6.231.21', '74.6.143.25','74.6.143.26', '98.137.11.163'}, 100), 0)
    def test_checkForMultipleRequests_website3_4444(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "A", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "AAAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "MX", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "CNAME", {"b'pl.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "NS", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "SOA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", "CAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "104.20", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", "www.ibetthiswebsitedoesntexist.pl", ".", set(), 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4...4", "www.ibetthiswebsitedoesntexist.pl", "A", set(), 100), 0)
    def test_checkForMultipleRequests_website4_4444(self):
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "A", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "AAAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "MX", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "CNAME", {"b'.'"}, 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "NS", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "SOA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "CAA", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", "PTR", set(), 100), 100)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4.4.4.4", " ", ".", set(), 100), 0)
        self.assertEqual(DNStestFunctions.checkForMultipleRequests("4...4", " ", "A", set(), 100), 0)

if __name__ == "__main__":
    unittest.main()